{"ast":null,"code":"import _classCallCheck from \"E:\\\\PsychometricAnalysisTool\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:\\\\PsychometricAnalysisTool\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"E:\\\\PsychometricAnalysisTool\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"E:\\\\PsychometricAnalysisTool\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"E:\\\\PsychometricAnalysisTool\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"E:\\\\PsychometricAnalysisTool\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"E:\\\\PsychometricAnalysisTool\\\\frontend\\\\src\\\\Phase1.js\";\nimport React, { Component } from 'react';\nimport Webcam from \"react-webcam\"; // import { ReactMic } from 'react-mic';\n\nimport ReactMicRecord from 'react-mic-record'; // import Recorder from 'recorder-js';\n\nimport \"./phase1.css\"; //   import { saveAs } from 'file-saver';\n// const fs = require('fs');\n\nvar axios = require(\"axios\");\n\nvar FileSaver = require('file-saver'); // var h=1;\n// const audioContext =  new (window.AudioContext || window.webkitAudioContext)();\n// const recorder = new Recorder(audioContext, {\n// onAnalysed: data =>\n//     console.log(data),\n// });\n\n\nvar Phase1 =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Phase1, _Component);\n\n  function Phase1(props) {\n    var _this;\n\n    _classCallCheck(this, Phase1);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Phase1).call(this, props));\n\n    _this.setRef = function (webcam) {\n      _this.webcam = webcam;\n    };\n\n    _this.captureOne = function () {\n      _this.setState({\n        singleCapture: true\n      });\n\n      _this.capture();\n    };\n\n    _this.capture = function () {\n      var imageSrc = _this.webcam.getScreenshot();\n\n      var y = _this.state.noofcaptures;\n\n      _this.setState({\n        noofcaptures: y + 1\n      });\n\n      console.log(\"image taken\", _this.state.noofcaptures);\n      var dataURI = imageSrc;\n      var byteString = atob(dataURI.split(',')[1]); // separate out the mime component\n\n      var mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0]; // write the bytes of the string to an ArrayBuffer\n\n      var ab = new ArrayBuffer(byteString.length); // create a view into the buffer\n\n      var ia = new Uint8Array(ab); // set the bytes of the buffer to the correct values\n\n      for (var i = 0; i < byteString.length; i++) {\n        ia[i] = byteString.charCodeAt(i);\n      } // write the ArrayBuffer to a blob, and you're done\n\n\n      var blob = new Blob([ab], {\n        type: mimeString\n      });\n      var file = new File([blob], \"imagefer\" + _this.state.noofcaptures + \".png\", {\n        type: \"image/png\",\n        lastModified: Date.now()\n      });\n      var data = new FormData();\n      data.append('imgUploader', file);\n      var config = {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      };\n      axios.post(\"http://localhost:8889/uploadfer/\", data, config).then(function (response) {\n        console.log(\"The fer image is successfully uploaded\");\n      }).catch(function (error) {});\n    };\n\n    _this.Recording = function (e) {\n      var name = e.target.name;\n      var y = _this.state.audionum; //var myVar;\n\n      if (name === 'startrec') {\n        _this.setState({\n          record: true,\n          audionum: y + 1\n        });\n\n        _this.myVar = setInterval(_this.capture, 4000);\n        setTimeout(function () {\n          clearInterval(_this.myVar);\n        }, 13000);\n        console.log(\"chalu ho gaya\");\n      } else if (name === 'stoprec') {\n        var r = _this.state.refresh;\n\n        _this.setState({\n          record: false,\n          refresh: r + 1\n        });\n\n        window.clearInterval(_this.myVar);\n        console.log(\"khatam ho gaya\");\n        var p = _this.state.breakpoints;\n        p.push(_this.state.noofcaptures);\n\n        _this.setState({\n          breakpoints: p\n        });\n\n        localStorage.setItem(\"breaks\", JSON.stringify({\n          \"breaks\": _this.state.breakpoints\n        })); // var blob= JSON.parse(localStorage.getItem(\"audioblob\")).audioblob;\n        // FileSaver.saveAs(blob.blobURL,\"rec\"+y+\".wav\");\n        //FER-- s=s+\"Angry: \"+x[0]+\"\\nDisgust: \"+x[1]+\"\\nFear: \"+x[2]+\"\\nHappy: \"+x[3]+\"\\nSad: \"+x[4]+\"\\nSurprised: \"+x[5]+\"\\nNeutral: \"+x[6];\n        //speech emotion-- neutral , calm, happy, sad, angry, fear, disgust\n      }\n    };\n\n    _this.handleQuestion = function (e) {\n      var name = e.target.name;\n      var qi = _this.state.qid;\n      var ql = _this.state.quesans1.length;\n\n      if (name === 'quesprevious') {\n        if (qi === 0) qi = ql - 1;else qi -= 1;\n\n        _this.setState({\n          qid: qi,\n          speechtext: \"\"\n        });\n      } else if (name === 'quesnext') {\n        if (qi === ql - 1) qi = 0;else qi += 1;\n\n        _this.setState({\n          qid: qi,\n          speechtext: \"\"\n        });\n      }\n    };\n\n    _this.state = {\n      refresh: 1,\n      record: false,\n      quesans1: _this.props.quesans1,\n      qid: 0,\n      showtest: 0,\n      test: \"\",\n      showselect: true,\n      isRec: false,\n      blob: null,\n      noofcaptures: 0,\n      breakpoints: [],\n      speechtext: \"\"\n    };\n    _this.onStop = _this.onStop.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Phase1, [{\n    key: \"onData\",\n    value: function onData(recordedBlob) {\n      console.log('chunk of real-time data is: ', recordedBlob);\n    }\n  }, {\n    key: \"onStop\",\n    value: function onStop(recordedBlob) {\n      var _this2 = this;\n\n      console.log('recordedBlob is: ', recordedBlob); // localStorage.setItem(\"audioblob\", JSON.stringify({\"audioblob\":recordedBlob}));   \n\n      FileSaver.saveAs(recordedBlob.blobURL, \"rec\" + (this.state.qid + 1) + \".webm\"); // () =>{\n\n      var x = 9000000000;\n\n      while (x--) {\n        ;\n      }\n\n      fetch(\"http://localhost:8000/FindEmotionSpeech/\", {\n        method: 'post',\n        headers: new Headers({\n          'content-type': 'application/json'\n        }),\n        \"withCredentials\": true,\n        \"mode\": \"cors\",\n        body: JSON.stringify({\n          \"filenumber\": \"\" + (this.state.qid + 1)\n        })\n      }).then(function (response) {\n        return response.json();\n      }).then(function (response) {\n        console.log(\"iske ander aaya hai.....\");\n        console.log(response); // console.log(\"hhhhhhhhh\",h)\n\n        var l = JSON.parse(localStorage.getItem(\"ser\"));\n\n        if (_this2.state.qid + 1 === 1) {\n          var x = [];\n          x.push(response);\n          localStorage.setItem(\"ser\", JSON.stringify({\n            \"ser\": x\n          }));\n        } else {\n          var x = l.ser;\n          x.push(response);\n          localStorage.setItem(\"ser\", JSON.stringify({\n            \"ser\": x\n          }));\n        }\n\n        var me = _this2;\n        fetch(\"http://localhost:8000/RecordFindSentiment/\", {\n          method: 'post',\n          headers: new Headers({\n            'content-type': 'application/json'\n          }),\n          \"withCredentials\": true,\n          \"mode\": \"cors\"\n        }).then(function (response) {\n          return response.json();\n        }).then(function (data) {\n          console.log(\"dataadatadatata\", data);\n          localStorage.setItem(\"sersenti\", JSON.stringify({\n            \"sersenti\": data[0]\n          }));\n          me.setState({\n            speechtext: data[1][data[1].length - 1]\n          }, function () {// var h=this.state.refresh;\n            // h=h+1;\n            // this.setState({refresh:h});\n          });\n          localStorage.setItem(\"speechtext\", JSON.stringify({\n            \"speechtext\": data[1]\n          }));\n          console.log(me.state.speechtext);\n        }).catch(function (err) {\n          console.log(err);\n        });\n      }).catch(function (err) {\n        console.log(err);\n      });\n      var h = this.state.refresh;\n      h = h + 1;\n      this.setState({\n        refresh: h\n      }); // })\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var videoConstraints = {\n        width: 600,\n        height: 600,\n        facingMode: \"user\"\n      }; // const { recording, stream } = this.state;\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"flex\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"card1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"card-body1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234\n        },\n        __self: this\n      }, React.createElement(\"h4\", {\n        className: \"card-title1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235\n        },\n        __self: this\n      }, \"Facial and Speech Emotion Recognition\"), React.createElement(\"p\", {\n        className: \"card-text1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 236\n        },\n        __self: this\n      }, \"Answer the questions that follow.You can navigate through questions using previous and next buttons\"), React.createElement(\"div\", {\n        className: \"videofeed\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237\n        },\n        __self: this\n      }, React.createElement(Webcam, {\n        style: {\n          width: \"-webkit-fill-available\",\n          float: 'left'\n        },\n        audio: false,\n        height: 450,\n        ref: this.setRef,\n        screenshotFormat: \"image/png\",\n        width: 400,\n        videoConstraints: videoConstraints,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239\n        },\n        __self: this\n      })))), React.createElement(\"div\", {\n        className: \"card\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"card-body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 255\n        },\n        __self: this\n      }, React.createElement(\"h4\", {\n        className: \"card-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256\n        },\n        __self: this\n      }, \"Emotion Recognition Test\"), React.createElement(\"p\", {\n        className: \"card-text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 257\n        },\n        __self: this\n      }, \"Answer the questions that follow by recording your audio. You can navigate through questions using previous and next buttons\"), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 258\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: \"displayques\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 259\n        },\n        __self: this\n      }, this.state.qid + 1, \". \", this.state.quesans1[this.state.qid].question, \" \")), React.createElement(\"div\", {\n        className: \"queschangerow\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 261\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"changequesp\",\n        name: \"quesprevious\",\n        onClick: this.handleQuestion,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 262\n        },\n        __self: this\n      }, \"Previous\"), React.createElement(\"button\", {\n        className: \"changequesn\",\n        name: \"quesnext\",\n        onClick: this.handleQuestion,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 263\n        },\n        __self: this\n      }, \"Next\")), React.createElement(\"div\", {\n        className: \"audio-div\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 265\n        },\n        __self: this\n      }, React.createElement(ReactMicRecord, {\n        style: {\n          width: \"200px\"\n        },\n        record: this.state.record,\n        className: \"sound-wave\",\n        onStop: this.onStop,\n        onData: this.onData,\n        strokeColor: \"#000000\",\n        backgroundColor: \"#FF4081\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 266\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"queschangerow\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 275\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"startrec\",\n        name: \"startrec\",\n        onClick: this.Recording,\n        type: \"button\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276\n        },\n        __self: this\n      }, \"StartRecording\"), React.createElement(\"button\", {\n        className: \"stoprec\",\n        name: \"stoprec\",\n        onClick: this.Recording,\n        type: \"button\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 277\n        },\n        __self: this\n      }, \"StopRecording\")))))));\n    }\n  }]);\n\n  return Phase1;\n}(Component);\n\nexport { Phase1 as default };","map":{"version":3,"sources":["E:\\PsychometricAnalysisTool\\frontend\\src\\Phase1.js"],"names":["React","Component","Webcam","ReactMicRecord","axios","require","FileSaver","Phase1","props","setRef","webcam","captureOne","setState","singleCapture","capture","imageSrc","getScreenshot","y","state","noofcaptures","console","log","dataURI","byteString","atob","split","mimeString","ab","ArrayBuffer","length","ia","Uint8Array","i","charCodeAt","blob","Blob","type","file","File","lastModified","Date","now","data","FormData","append","config","headers","post","then","response","catch","error","Recording","e","name","target","audionum","record","myVar","setInterval","setTimeout","clearInterval","r","refresh","window","p","breakpoints","push","localStorage","setItem","JSON","stringify","handleQuestion","qi","qid","ql","quesans1","speechtext","showtest","test","showselect","isRec","onStop","bind","recordedBlob","saveAs","blobURL","x","fetch","method","Headers","body","json","l","parse","getItem","ser","me","err","h","videoConstraints","width","height","facingMode","float","question","onData"],"mappings":";;;;;;;AAAQ,OAAOA,KAAP,IAAcC,SAAd,QAA8B,OAA9B;AACA,OAAOC,MAAP,MAAmB,cAAnB,C,CACA;;AACC,OAAQC,cAAR,MAA6B,kBAA7B,C,CACD;;AACA,OAAO,cAAP,C,CACH;AACG;;AACA,IAAMC,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,IAAIC,SAAS,GAAGD,OAAO,CAAC,YAAD,CAAvB,C,CACA;AACA;AAEA;AACA;AACA;AACA;;;IACqBE,M;;;;;AACjB,kBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,gFAAMA,KAAN;;AADe,UAoBnBC,MApBmB,GAoBV,UAAAC,MAAM,EAAI;AACf,YAAKA,MAAL,GAAcA,MAAd;AACD,KAtBgB;;AAAA,UAwBnBC,UAxBmB,GAwBR,YAAI;AACX,YAAKC,QAAL,CAAc;AACVC,QAAAA,aAAa,EAAC;AADJ,OAAd;;AAGA,YAAKC,OAAL;AACH,KA7BkB;;AAAA,UA8BnBA,OA9BmB,GA8BT,YAAM;AACZ,UAAMC,QAAQ,GAAG,MAAKL,MAAL,CAAYM,aAAZ,EAAjB;;AACA,UAAIC,CAAC,GAAC,MAAKC,KAAL,CAAWC,YAAjB;;AACA,YAAKP,QAAL,CAAc;AACVO,QAAAA,YAAY,EAACF,CAAC,GAAC;AADL,OAAd;;AAGAG,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA0B,MAAKH,KAAL,CAAWC,YAArC;AACA,UAAIG,OAAO,GAACP,QAAZ;AACA,UAAIQ,UAAU,GAAGC,IAAI,CAACF,OAAO,CAACG,KAAR,CAAc,GAAd,EAAmB,CAAnB,CAAD,CAArB,CARY,CASZ;;AACA,UAAIC,UAAU,GAAGJ,OAAO,CAACG,KAAR,CAAc,GAAd,EAAmB,CAAnB,EAAsBA,KAAtB,CAA4B,GAA5B,EAAiC,CAAjC,EAAoCA,KAApC,CAA0C,GAA1C,EAA+C,CAA/C,CAAjB,CAVY,CAWZ;;AACA,UAAIE,EAAE,GAAG,IAAIC,WAAJ,CAAgBL,UAAU,CAACM,MAA3B,CAAT,CAZY,CAaZ;;AACA,UAAIC,EAAE,GAAG,IAAIC,UAAJ,CAAeJ,EAAf,CAAT,CAdY,CAeZ;;AACA,WAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,UAAU,CAACM,MAA/B,EAAuCG,CAAC,EAAxC,EAA4C;AACxCF,QAAAA,EAAE,CAACE,CAAD,CAAF,GAAQT,UAAU,CAACU,UAAX,CAAsBD,CAAtB,CAAR;AACH,OAlBW,CAmBZ;;;AACA,UAAIE,IAAI,GAAG,IAAIC,IAAJ,CAAS,CAACR,EAAD,CAAT,EAAe;AAACS,QAAAA,IAAI,EAAEV;AAAP,OAAf,CAAX;AACA,UAAIW,IAAI,GAAG,IAAIC,IAAJ,CAAS,CAACJ,IAAD,CAAT,EAAiB,aAAW,MAAKhB,KAAL,CAAWC,YAAtB,GAAmC,MAApD,EAA4D;AAACiB,QAAAA,IAAI,EAAE,WAAP;AAAoBG,QAAAA,YAAY,EAAEC,IAAI,CAACC,GAAL;AAAlC,OAA5D,CAAX;AACA,UAAIC,IAAI,GAAG,IAAIC,QAAJ,EAAX;AACAD,MAAAA,IAAI,CAACE,MAAL,CAAY,aAAZ,EAA0BP,IAA1B;AACA,UAAIQ,MAAM,GAAG;AACTC,QAAAA,OAAO,EAAE;AACL,0BAAgB;AADX;AADA,OAAb;AAKA1C,MAAAA,KAAK,CAAC2C,IAAN,qCAA8CL,IAA9C,EAAmDG,MAAnD,EACKG,IADL,CACU,UAACC,QAAD,EAAc;AAChB7B,QAAAA,OAAO,CAACC,GAAR,CAAY,wCAAZ;AACH,OAHL,EAGO6B,KAHP,CAGa,UAACC,KAAD,EAAW,CACvB,CAJD;AAMH,KAjEkB;;AAAA,UAgJnBC,SAhJmB,GAgJT,UAACC,CAAD,EAAK;AACX,UAAIC,IAAI,GAAGD,CAAC,CAACE,MAAF,CAASD,IAApB;AACA,UAAIrC,CAAC,GAAC,MAAKC,KAAL,CAAWsC,QAAjB,CAFW,CAGX;;AACA,UAAGF,IAAI,KAAG,UAAV,EACA;AACI,cAAK1C,QAAL,CAAc;AACV6C,UAAAA,MAAM,EAAC,IADG;AAEVD,UAAAA,QAAQ,EAACvC,CAAC,GAAC;AAFD,SAAd;;AAIJ,cAAKyC,KAAL,GAAaC,WAAW,CAAC,MAAK7C,OAAN,EAAe,IAAf,CAAxB;AACA8C,QAAAA,UAAU,CAAC,YAAK;AAAEC,UAAAA,aAAa,CAAE,MAAKH,KAAP,CAAb;AAA8B,SAAtC,EAAwC,KAAxC,CAAV;AACAtC,QAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACC,OATD,MAUK,IAAGiC,IAAI,KAAG,SAAV,EACL;AACI,YAAIQ,CAAC,GAAC,MAAK5C,KAAL,CAAW6C,OAAjB;;AACA,cAAKnD,QAAL,CAAc;AACV6C,UAAAA,MAAM,EAAC,KADG;AAEVM,UAAAA,OAAO,EAAED,CAAC,GAAC;AAFD,SAAd;;AAKAE,QAAAA,MAAM,CAACH,aAAP,CAAqB,MAAKH,KAA1B;AACAtC,QAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACA,YAAI4C,CAAC,GAAE,MAAK/C,KAAL,CAAWgD,WAAlB;AACAD,QAAAA,CAAC,CAACE,IAAF,CAAO,MAAKjD,KAAL,CAAWC,YAAlB;;AACA,cAAKP,QAAL,CAAc;AAACsD,UAAAA,WAAW,EAACD;AAAb,SAAd;;AACAG,QAAAA,YAAY,CAACC,OAAb,CAAqB,QAArB,EAA+BC,IAAI,CAACC,SAAL,CAAe;AAAC,oBAAS,MAAKrD,KAAL,CAAWgD;AAArB,SAAf,CAA/B,EAZJ,CAaI;AACA;AACd;AACE;AACS;AACJ,KAjLkB;;AAAA,UAmLnBM,cAnLmB,GAmLJ,UAACnB,CAAD,EAAK;AAChB,UAAIC,IAAI,GAAGD,CAAC,CAACE,MAAF,CAASD,IAApB;AACA,UAAImB,EAAE,GAAC,MAAKvD,KAAL,CAAWwD,GAAlB;AACA,UAAIC,EAAE,GAAC,MAAKzD,KAAL,CAAW0D,QAAX,CAAoB/C,MAA3B;;AACA,UAAGyB,IAAI,KAAG,cAAV,EACA;AACI,YAAGmB,EAAE,KAAG,CAAR,EAAUA,EAAE,GAACE,EAAE,GAAC,CAAN,CAAV,KACKF,EAAE,IAAE,CAAJ;;AACL,cAAK7D,QAAL,CAAc;AACV8D,UAAAA,GAAG,EAACD,EADM;AAEVI,UAAAA,UAAU,EAAC;AAFD,SAAd;AAKH,OATD,MAUK,IAAGvB,IAAI,KAAG,UAAV,EACL;AACI,YAAGmB,EAAE,KAAGE,EAAE,GAAC,CAAX,EAAaF,EAAE,GAAC,CAAH,CAAb,KACKA,EAAE,IAAE,CAAJ;;AACL,cAAK7D,QAAL,CAAc;AACV8D,UAAAA,GAAG,EAACD,EADM;AAEVI,UAAAA,UAAU,EAAC;AAFD,SAAd;AAIH;AACJ,KA1MkB;;AAEf,UAAK3D,KAAL,GAAW;AAEP6C,MAAAA,OAAO,EAAC,CAFD;AAGPN,MAAAA,MAAM,EAAC,KAHA;AAIPmB,MAAAA,QAAQ,EAAC,MAAKpE,KAAL,CAAWoE,QAJb;AAKPF,MAAAA,GAAG,EAAC,CALG;AAMPI,MAAAA,QAAQ,EAAE,CANH;AAOPC,MAAAA,IAAI,EAAC,EAPE;AAQPC,MAAAA,UAAU,EAAE,IARL;AASPC,MAAAA,KAAK,EAAE,KATA;AAUP/C,MAAAA,IAAI,EAAC,IAVE;AAWPf,MAAAA,YAAY,EAAC,CAXN;AAYP+C,MAAAA,WAAW,EAAC,EAZL;AAaPW,MAAAA,UAAU,EAAC;AAbJ,KAAX;AAgBA,UAAKK,MAAL,GAAc,MAAKA,MAAL,CAAYC,IAAZ,uDAAd;AAlBe;AAmBlB;;;;2BAgDMC,Y,EAAc;AAEhBhE,MAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ,EAA4C+D,YAA5C;AACJ;;;2BAEMA,Y,EAAc;AAAA;;AACjBhE,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiC+D,YAAjC,EADiB,CAEjB;;AACA9E,MAAAA,SAAS,CAAC+E,MAAV,CAAiBD,YAAY,CAACE,OAA9B,EAAuC,SAAO,KAAKpE,KAAL,CAAWwD,GAAX,GAAe,CAAtB,IAAyB,OAAhE,EAHiB,CAIjB;;AAEA,UAAIa,CAAC,GAAC,UAAN;;AACA,aAAMA,CAAC,EAAP;AAAU;AAAV;;AACAC,MAAAA,KAAK,CAAC,0CAAD,EACD;AACIC,QAAAA,MAAM,EAAE,MADZ;AAEI3C,QAAAA,OAAO,EAAE,IAAI4C,OAAJ,CAAY;AAAC,0BAAgB;AAAjB,SAAZ,CAFb;AAGI,2BAAkB,IAHtB;AAII,gBAAO,MAJX;AAKIC,QAAAA,IAAI,EAAErB,IAAI,CAACC,SAAL,CAAe;AAAC,wBAAa,MAAI,KAAKrD,KAAL,CAAWwD,GAAX,GAAe,CAAnB;AAAd,SAAf;AALV,OADC,CAAL,CAQM1B,IARN,CAQW,UAAAC,QAAQ,EAAI;AACf,eAAOA,QAAQ,CAAC2C,IAAT,EAAP;AACH,OAVL,EAUO5C,IAVP,CAUY,UAAAC,QAAQ,EAAE;AACd7B,QAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACAD,QAAAA,OAAO,CAACC,GAAR,CAAY4B,QAAZ,EAFc,CAGd;;AACA,YAAI4C,CAAC,GAACvB,IAAI,CAACwB,KAAL,CAAW1B,YAAY,CAAC2B,OAAb,CAAqB,KAArB,CAAX,CAAN;;AACA,YAAG,MAAI,CAAC7E,KAAL,CAAWwD,GAAX,GAAe,CAAf,KAAmB,CAAtB,EACA;AACI,cAAIa,CAAC,GAAC,EAAN;AACAA,UAAAA,CAAC,CAACpB,IAAF,CAAOlB,QAAP;AACAmB,UAAAA,YAAY,CAACC,OAAb,CAAqB,KAArB,EAA4BC,IAAI,CAACC,SAAL,CAAe;AAAC,mBAAMgB;AAAP,WAAf,CAA5B;AAEH,SAND,MAQA;AACI,cAAIA,CAAC,GAACM,CAAC,CAACG,GAAR;AACAT,UAAAA,CAAC,CAACpB,IAAF,CAAOlB,QAAP;AACAmB,UAAAA,YAAY,CAACC,OAAb,CAAqB,KAArB,EAA4BC,IAAI,CAACC,SAAL,CAAe;AAAC,mBAAMgB;AAAP,WAAf,CAA5B;AACH;;AACD,YAAIU,EAAE,GAAG,MAAT;AACAT,QAAAA,KAAK,CAAC,4CAAD,EACL;AACIC,UAAAA,MAAM,EAAE,MADZ;AAEI3C,UAAAA,OAAO,EAAE,IAAI4C,OAAJ,CAAY;AAAC,4BAAgB;AAAjB,WAAZ,CAFb;AAGI,6BAAkB,IAHtB;AAII,kBAAO;AAJX,SADK,CAAL,CAMG1C,IANH,CAMQ,UAAAC,QAAQ,EAAI;AAChB,iBAAOA,QAAQ,CAAC2C,IAAT,EAAP;AACH,SARD,EAQG5C,IARH,CAQQ,UAAAN,IAAI,EAAE;AACVtB,UAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA8BqB,IAA9B;AACA0B,UAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCC,IAAI,CAACC,SAAL,CAAe;AAAC,wBAAW7B,IAAI,CAAC,CAAD;AAAhB,WAAf,CAAjC;AACAuD,UAAAA,EAAE,CAACrF,QAAH,CAAY;AAACiE,YAAAA,UAAU,EAAEnC,IAAI,CAAC,CAAD,CAAJ,CAAQA,IAAI,CAAC,CAAD,CAAJ,CAAQb,MAAR,GAAe,CAAvB;AAAb,WAAZ,EACI,YAAI,CACA;AACA;AACA;AACH,WALL;AAOAuC,UAAAA,YAAY,CAACC,OAAb,CAAqB,YAArB,EAAmCC,IAAI,CAACC,SAAL,CAAe;AAAC,0BAAa7B,IAAI,CAAC,CAAD;AAAlB,WAAf,CAAnC;AACAtB,UAAAA,OAAO,CAACC,GAAR,CAAY4E,EAAE,CAAC/E,KAAH,CAAS2D,UAArB;AAEH,SArBD,EAqBG3B,KArBH,CAqBS,UAAAgD,GAAG,EAAE;AACV9E,UAAAA,OAAO,CAACC,GAAR,CAAY6E,GAAZ;AACH,SAvBD;AAyBH,OAtDL,EAsDOhD,KAtDP,CAsDa,UAAAgD,GAAG,EAAE;AACV9E,QAAAA,OAAO,CAACC,GAAR,CAAY6E,GAAZ;AACH,OAxDL;AA0DI,UAAIC,CAAC,GAAC,KAAKjF,KAAL,CAAW6C,OAAjB;AACgBoC,MAAAA,CAAC,GAACA,CAAC,GAAC,CAAJ;AACA,WAAKvF,QAAL,CAAc;AAACmD,QAAAA,OAAO,EAACoC;AAAT,OAAd,EApEH,CAqEjB;AACH;;;6BA6DO;AACJ,UAAMC,gBAAgB,GAAG;AACrBC,QAAAA,KAAK,EAAE,GADc;AAErBC,QAAAA,MAAM,EAAE,GAFa;AAGrBC,QAAAA,UAAU,EAAE;AAHS,OAAzB,CADI,CAMJ;;AACA,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAI,QAAA,SAAS,EAAC,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iDADJ,EAEI;AAAG,QAAA,SAAS,EAAC,YAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+GAFJ,EAGI;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEI,oBAAC,MAAD;AACI,QAAA,KAAK,EAAE;AACHF,UAAAA,KAAK,EAAC,wBADH;AAC4BG,UAAAA,KAAK,EAAC;AADlC,SADX;AAII,QAAA,KAAK,EAAE,KAJX;AAKI,QAAA,MAAM,EAAE,GALZ;AAMI,QAAA,GAAG,EAAE,KAAK/F,MANd;AAOI,QAAA,gBAAgB,EAAC,WAPrB;AAQI,QAAA,KAAK,EAAE,GARX;AASI,QAAA,gBAAgB,EAAE2F,gBATtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,CAHJ,CADJ,CADJ,EAsBI;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAI,QAAA,SAAS,EAAC,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCADJ,EAEI;AAAG,QAAA,SAAS,EAAC,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wIAFJ,EAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAG,QAAA,SAAS,EAAC,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA4B,KAAKlF,KAAL,CAAWwD,GAAX,GAAe,CAA3C,QAAgD,KAAKxD,KAAL,CAAW0D,QAAX,CAAoB,KAAK1D,KAAL,CAAWwD,GAA/B,EAAoC+B,QAApF,MADJ,CAHJ,EAMI;AAAK,QAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAQ,QAAA,SAAS,EAAC,aAAlB;AAAgC,QAAA,IAAI,EAAC,cAArC;AAAoD,QAAA,OAAO,EAAE,KAAKjC,cAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,EAEI;AAAQ,QAAA,SAAS,EAAC,aAAlB;AAAgC,QAAA,IAAI,EAAC,UAArC;AAAgD,QAAA,OAAO,EAAE,KAAKA,cAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ,CANJ,EAUI;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACQ,oBAAC,cAAD;AAAgB,QAAA,KAAK,EAAE;AAAC6B,UAAAA,KAAK,EAAC;AAAP,SAAvB;AACA,QAAA,MAAM,EAAE,KAAKnF,KAAL,CAAWuC,MADnB;AAEA,QAAA,SAAS,EAAC,YAFV;AAGA,QAAA,MAAM,EAAE,KAAKyB,MAHb;AAIA,QAAA,MAAM,EAAE,KAAKwB,MAJb;AAKA,QAAA,WAAW,EAAC,SALZ;AAMA,QAAA,eAAe,EAAC,SANhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADR,CAVJ,EAoBI;AAAK,QAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAQ,QAAA,SAAS,EAAC,UAAlB;AAA6B,QAAA,IAAI,EAAC,UAAlC;AAA6C,QAAA,OAAO,EAAE,KAAKtD,SAA3D;AAAsE,QAAA,IAAI,EAAC,QAA3E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADJ,EAEI;AAAQ,QAAA,SAAS,EAAC,SAAlB;AAA4B,QAAA,IAAI,EAAC,SAAjC;AAA2C,QAAA,OAAO,EAAE,KAAKA,SAAzD;AAAoE,QAAA,IAAI,EAAC,QAAzE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAFJ,CApBJ,CADJ,CAtBJ,CADJ,CADJ,CADJ;AA0DH;;;;EA7Q+BnD,S;;SAAfM,M","sourcesContent":["        import React,{Component} from 'react';\n        import Webcam from \"react-webcam\";\n        // import { ReactMic } from 'react-mic';\n         import  ReactMicRecord  from 'react-mic-record';\n        // import Recorder from 'recorder-js';\n        import \"./phase1.css\"\n     //   import { saveAs } from 'file-saver';\n        // const fs = require('fs');\n        const axios = require(\"axios\");\n        var FileSaver = require('file-saver');\n        // var h=1;\n        // const audioContext =  new (window.AudioContext || window.webkitAudioContext)();\n        \n        // const recorder = new Recorder(audioContext, {\n        // onAnalysed: data =>\n        //     console.log(data),\n        // });\n        export default class Phase1 extends Component{\n            constructor(props) {\n                super(props);\n                this.state={\n                    \n                    refresh:1,\n                    record:false,\n                    quesans1:this.props.quesans1,\n                    qid:0,\n                    showtest: 0,\n                    test:\"\",\n                    showselect: true,\n                    isRec: false,\n                    blob:null,\n                    noofcaptures:0,\n                    breakpoints:[],\n                    speechtext:\"\"\n\n                }\n                this.onStop = this.onStop.bind(this)\n            }\n            setRef = webcam => {\n                this.webcam = webcam;\n              };\n\n            captureOne=()=>{\n                this.setState({\n                    singleCapture:true\n                });\n                this.capture();\n            }\n            capture = () => {\n                const imageSrc = this.webcam.getScreenshot();\n                let y=this.state.noofcaptures;\n                this.setState({\n                    noofcaptures:y+1\n                });\n                console.log(\"image taken\",this.state.noofcaptures);\n                var dataURI=imageSrc;\n                var byteString = atob(dataURI.split(',')[1]);\n                // separate out the mime component\n                var mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0]\n                // write the bytes of the string to an ArrayBuffer\n                var ab = new ArrayBuffer(byteString.length);\n                // create a view into the buffer\n                var ia = new Uint8Array(ab);\n                // set the bytes of the buffer to the correct values\n                for (var i = 0; i < byteString.length; i++) {\n                    ia[i] = byteString.charCodeAt(i);\n                }\n                // write the ArrayBuffer to a blob, and you're done\n                var blob = new Blob([ab], {type: mimeString});\n                var file = new File([blob], \"imagefer\"+this.state.noofcaptures+\".png\", {type: \"image/png\", lastModified: Date.now()});\n                var data = new FormData();\n                data.append('imgUploader',file);\n                var config = {\n                    headers: {\n                        'Content-Type': 'multipart/form-data'\n                    }  \n                };\n                axios.post(`http://localhost:8889/uploadfer/`,data,config)\n                    .then((response) => {\n                        console.log(\"The fer image is successfully uploaded\");\n                    }).catch((error) => {\n                });\n                \n            }\n            \n            onData(recordedBlob) {\n                \n                 console.log('chunk of real-time data is: ', recordedBlob);\n            }\n            \n            onStop(recordedBlob) {\n                console.log('recordedBlob is: ', recordedBlob);\n                // localStorage.setItem(\"audioblob\", JSON.stringify({\"audioblob\":recordedBlob}));   \n                FileSaver.saveAs(recordedBlob.blobURL, \"rec\"+(this.state.qid+1)+\".webm\");\n                // () =>{\n                \n                var x=9000000000;\n                while(x--);\n                fetch(\"http://localhost:8000/FindEmotionSpeech/\",\n                    {\n                        method: 'post',\n                        headers: new Headers({'content-type': 'application/json'}),\n                        \"withCredentials\":true,\n                        \"mode\":\"cors\",   \n                        body: JSON.stringify({\"filenumber\":\"\"+(this.state.qid+1)})\n                    }\n                    ).then(response => {\n                        return response.json()\n                    }).then(response=>{\n                        console.log(\"iske ander aaya hai.....\")\n                        console.log(response);\n                        // console.log(\"hhhhhhhhh\",h)\n                        var l=JSON.parse(localStorage.getItem(\"ser\"));\n                        if(this.state.qid+1===1)\n                        {\n                            var x=[]\n                            x.push(response);\n                            localStorage.setItem(\"ser\", JSON.stringify({\"ser\":x}));\n                        \n                        }\n                        else\n                        {\n                            var x=l.ser;\n                            x.push(response);\n                            localStorage.setItem(\"ser\", JSON.stringify({\"ser\":x})); \n                        }\n                        var me = this;\n                        fetch(\"http://localhost:8000/RecordFindSentiment/\",\n                        {\n                            method: 'post',\n                            headers: new Headers({'content-type': 'application/json'}),\n                            \"withCredentials\":true,\n                            \"mode\":\"cors\",\n                        }).then(response => {\n                            return response.json();\n                        }).then(data=>{\n                            console.log(\"dataadatadatata\",data);\n                            localStorage.setItem(\"sersenti\", JSON.stringify({\"sersenti\":data[0]})); \n                            me.setState({speechtext: data[1][data[1].length-1]},\n                                ()=>{\n                                    // var h=this.state.refresh;\n                                    // h=h+1;\n                                    // this.setState({refresh:h});\n                                });\n                               \n                            localStorage.setItem(\"speechtext\", JSON.stringify({\"speechtext\":data[1]})); \n                            console.log(me.state.speechtext);\n                            \n                        }).catch(err=>{\n                            console.log(err);\n                        });\n                            \n                    }).catch(err=>{\n                        console.log(err);\n                    });\n                    \n                    var h=this.state.refresh;\n                                    h=h+1;\n                                    this.setState({refresh:h});\n                // })\n            }\n\n            Recording=(e)=>{\n                let name = e.target.name;\n                let y=this.state.audionum;\n                //var myVar;\n                if(name==='startrec')\n                {\n                    this.setState({\n                        record:true,\n                        audionum:y+1\n                    });\n                this.myVar = setInterval(this.capture, 4000);\n                setTimeout(()=> { clearInterval( this.myVar ); }, 13000);\n                console.log(\"chalu ho gaya\");\n                }\n                else if(name==='stoprec')\n                {\n                    let r=this.state.refresh;\n                    this.setState({\n                        record:false,\n                        refresh: r+1\n                    });\n                    \n                    window.clearInterval(this.myVar);\n                    console.log(\"khatam ho gaya\");\n                    var p= this.state.breakpoints;\n                    p.push(this.state.noofcaptures);\n                    this.setState({breakpoints:p});\n                    localStorage.setItem(\"breaks\", JSON.stringify({\"breaks\":this.state.breakpoints}));      \n                    // var blob= JSON.parse(localStorage.getItem(\"audioblob\")).audioblob;\n                    // FileSaver.saveAs(blob.blobURL,\"rec\"+y+\".wav\");\n      //FER-- s=s+\"Angry: \"+x[0]+\"\\nDisgust: \"+x[1]+\"\\nFear: \"+x[2]+\"\\nHappy: \"+x[3]+\"\\nSad: \"+x[4]+\"\\nSurprised: \"+x[5]+\"\\nNeutral: \"+x[6];\n        //speech emotion-- neutral , calm, happy, sad, angry, fear, disgust\n                }\n            }       \n\n            handleQuestion=(e)=>{\n                let name = e.target.name;\n                let qi=this.state.qid;        \n                let ql=this.state.quesans1.length;\n                if(name==='quesprevious')\n                {\n                    if(qi===0)qi=ql-1;\n                    else qi-=1;\n                    this.setState({\n                        qid:qi,\n                        speechtext:\"\"\n                    });\n                    \n                }\n                else if(name==='quesnext')\n                {\n                    if(qi===ql-1)qi=0;\n                    else qi+=1;\n                    this.setState({\n                        qid:qi,\n                        speechtext:\"\"\n                    });\n                }\n            }\n            render(){\n                const videoConstraints = {\n                    width: 600,\n                    height: 600,\n                    facingMode: \"user\"\n                };\n                // const { recording, stream } = this.state;\n                return(\n                    <div>\n                        <div className=\"row\">\n                            <div className=\"flex\">\n                                <div className=\"card1\" >\n                                    <div className=\"card-body1\">\n                                        <h4 className=\"card-title1\">Facial and Speech Emotion Recognition</h4>\n                                        <p className=\"card-text1\">Answer the questions that follow.You can navigate through questions using previous and next buttons</p>\n                                        <div className=\"videofeed\">\n\n                                            <Webcam\n                                                style={{\n                                                    width:\"-webkit-fill-available\",float:'left'\n                                                }}\n                                                audio={false}\n                                                height={450}\n                                                ref={this.setRef}\n                                                screenshotFormat=\"image/png\"\n                                                width={400}\n                                                videoConstraints={videoConstraints}           \n                                            />\n\n                                        </div>\n                                    </div>\n                                </div>\n                                <div className=\"card\" >\n                                    <div className=\"card-body\">\n                                        <h4 className=\"card-title\">Emotion Recognition Test</h4>\n                                        <p className=\"card-text\">Answer the questions that follow by recording your audio. You can navigate through questions using previous and next buttons</p>\n                                        <div>\n                                            <p className=\"displayques\">{this.state.qid+1}. {this.state.quesans1[this.state.qid].question} </p>\n                                        </div>\n                                        <div className=\"queschangerow\">\n                                            <button className=\"changequesp\" name=\"quesprevious\" onClick={this.handleQuestion}>Previous</button>\n                                            <button className=\"changequesn\" name=\"quesnext\" onClick={this.handleQuestion}>Next</button>\n                                        </div>\n                                        <div className=\"audio-div\">\n                                                <ReactMicRecord style={{width:\"200px\"}}\n                                                record={this.state.record}\n                                                className=\"sound-wave\"\n                                                onStop={this.onStop}\n                                                onData={this.onData}\n                                                strokeColor=\"#000000\"\n                                                backgroundColor=\"#FF4081\" \n                                                />\n                                            </div>\n                                        <div className=\"queschangerow\">\n                                            <button className=\"startrec\" name=\"startrec\" onClick={this.Recording} type=\"button\">StartRecording</button>\n                                            <button className=\"stoprec\" name=\"stoprec\" onClick={this.Recording} type=\"button\">StopRecording</button>\n                                        </div>\n                        \n                                        \n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                );\n            }\n\n        }"]},"metadata":{},"sourceType":"module"}