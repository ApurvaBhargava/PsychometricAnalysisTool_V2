{"ast":null,"code":"import _classCallCheck from \"E:\\\\PsychometricAnalysisTool\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:\\\\PsychometricAnalysisTool\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"E:\\\\PsychometricAnalysisTool\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"E:\\\\PsychometricAnalysisTool\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"E:\\\\PsychometricAnalysisTool\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"E:\\\\PsychometricAnalysisTool\\\\frontend\\\\src\\\\Phase3.js\";\nimport React, { Component } from 'react';\nimport MessageList from './messageList'; // import SendMessageForm from './sendMessageForm';\n\nimport \"./phase3.css\"; // const axios = require(\"axios\");\n// const DUMMY_DATA = [\n//     {\n//       senderId: \"computer\",\n//       text: \"who'll win?\"\n//     },\n//     {\n//       senderId: \"user\",\n//       text: \"I'll win...\"\n//     }\n//   ]\n\nvar Phase3 =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Phase3, _Component);\n\n  function Phase3(props) {\n    var _this;\n\n    _classCallCheck(this, Phase3);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Phase3).call(this, props));\n\n    _this.handleSubmit = function (e) {\n      e.preventDefault();\n      console.log(\"third phase m hum aae\", _this.state.quesans3); // this.props.sendMessage(this.state.message)\n\n      var message = _this.state.mess;\n      var m = _this.state.messages;\n      m.push({\n        senderId: \"user\",\n        text: message\n      });\n\n      _this.setState({\n        messages: m\n      });\n\n      var i = _this.state.num;\n      var ll = [];\n      console.log(\"i\", i);\n\n      if (i === 4) {\n        ll = _this.state.quesans3;\n      }\n\n      console.log(\"ll\", ll);\n      fetch(\"http://localhost:8000/ChatterBot/\", {\n        method: 'post',\n        headers: new Headers({\n          'accept': 'application/jsonp',\n          'content-type': 'application/jsonp'\n        }),\n        \"withCredentials\": true,\n        \"mode\": \"no-cors\",\n        body: JSON.stringify({\n          \"text\": message,\n          \"quesans3\": ll\n        })\n      }).then(function (response) {\n        console.log(\"message arrived 1\", response);\n        return response.json();\n      }).then(function (data) {\n        console.log(\"message arrived 2\", data);\n        var m = _this.state.messages;\n        m.push({\n          senderId: \"computer\",\n          text: data\n        });\n\n        _this.setState({\n          messages: m\n        });\n      }).catch(function (err) {\n        console.log(err);\n      });\n\n      _this.setState({\n        mess: ''\n      });\n\n      i = _this.state.num;\n\n      _this.setState({\n        num: i + 1\n      });\n    };\n\n    _this.handleChange = function (e) {\n      _this.setState({\n        mess: e.target.value\n      });\n    };\n\n    _this.state = {\n      quesans3: [],\n      messages: [],\n      num: 1,\n      mess: '' //     this.handleChange = this.handleChange.bind(this)\n      // this.handleSubmit = this.handleSubmit.bind(this)\n\n    };\n    return _this;\n  }\n\n  _createClass(Phase3, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"phase3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"card3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"card-body3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, React.createElement(\"h4\", {\n        className: \"card-title3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, \"Automated ChatBot\"), React.createElement(\"p\", {\n        className: \"card-text3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, \" You can question and answer here in 10-50 words. \"), React.createElement(\"form\", {\n        onSubmit: this.handleSubmit,\n        className: \"send-message-form\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        onChange: this.handleChange,\n        value: this.state.mess,\n        placeholder: \"Type your message and hit ENTER\",\n        type: \"text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"messagelist-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, React.createElement(MessageList, {\n        messages: this.state.messages,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      })))));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      if (nextProps.quesans3 !== prevState.quesans3) {\n        return {\n          quesans3: nextProps.quesans3\n        };\n      } else return [];\n    } // componentWillReceiveProps(nextProps,prevProps)\n    // {\n    //     console.log(\"third phase m hum aae.........\");\n    //     if(prevProps!==nextProps&&nextProps.quesans3.length>0)\n    //     {\n    //         this.setState({\n    //             quesans3:nextProps.quesans3           \n    //         });\n    //         console.log(\"third phase m hum aae\",this.state.quesans3);\n    //     }\n    // }\n\n  }]);\n\n  return Phase3;\n}(Component);\n\nexport { Phase3 as default };","map":{"version":3,"sources":["E:\\PsychometricAnalysisTool\\frontend\\src\\Phase3.js"],"names":["React","Component","MessageList","Phase3","props","handleSubmit","e","preventDefault","console","log","state","quesans3","message","mess","m","messages","push","senderId","text","setState","i","num","ll","fetch","method","headers","Headers","body","JSON","stringify","then","response","json","data","catch","err","handleChange","target","value","nextProps","prevState"],"mappings":"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","sourcesContent":["import React,{Component} from 'react';\nimport MessageList from './messageList';\n// import SendMessageForm from './sendMessageForm';\nimport \"./phase3.css\"\n// const axios = require(\"axios\");\n\n// const DUMMY_DATA = [\n//     {\n//       senderId: \"computer\",\n//       text: \"who'll win?\"\n//     },\n//     {\n//       senderId: \"user\",\n//       text: \"I'll win...\"\n//     }\n//   ]\nexport default class Phase3 extends Component{\n    constructor(props) {\n        super(props);\n        this.state={\n            quesans3:[],\n            messages: [],\n            num:1,\n            mess:''\n        }\n    //     this.handleChange = this.handleChange.bind(this)\n    // this.handleSubmit = this.handleSubmit.bind(this)\n    }\n    static getDerivedStateFromProps(nextProps, prevState){\n        if(nextProps.quesans3!==prevState.quesans3){\n          return { quesans3: nextProps.quesans3};\n       }\n       else return [];\n     }\n\n    // componentWillReceiveProps(nextProps,prevProps)\n    // {\n    //     console.log(\"third phase m hum aae.........\");\n    //     if(prevProps!==nextProps&&nextProps.quesans3.length>0)\n    //     {\n    //         this.setState({\n    //             quesans3:nextProps.quesans3           \n    //         });\n    //         console.log(\"third phase m hum aae\",this.state.quesans3);\n    //     }\n    // }\n    handleSubmit=(e)=> {\n        e.preventDefault()\n        console.log(\"third phase m hum aae\",this.state.quesans3);\n        // this.props.sendMessage(this.state.message)\n        var message= this.state.mess;\n        var m= this.state.messages;\n        m.push({\n            senderId: \"user\",\n            text: message\n        })\n        this.setState({\n            messages:m\n        });\n        var i=this.state.num;\n        var ll=[]\n        console.log(\"i\",i);\n        if(i===4)\n        {\n            ll=this.state.quesans3;\n        }\n        console.log(\"ll\",ll);\n        fetch(\"http://localhost:8000/ChatterBot/\",\n    {\n        method: 'post',\n        headers: new Headers({'accept': 'application/jsonp', 'content-type': 'application/jsonp'}),\n        \"withCredentials\":true,\n        \"mode\":\"no-cors\"  ,\n        body: JSON.stringify({\n            \"text\" : message,\n            \"quesans3\": ll\n        }) \n        \n    }).then((response)=>{\n        console.log(\"message arrived 1\",response);\n        return response.json();\n    })\n    .then((data) =>{\n        console.log(\"message arrived 2\",data);\n        var m= this.state.messages;\n        m.push({\n            senderId: \"computer\",\n            text: data\n        })\n        this.setState({\n            messages:m\n        });\n    }).catch(err=>{\n        console.log(err);\n    })\n        this.setState({\n          mess: ''\n        });\n\n        i=this.state.num;\n        \n        this.setState({\n            num:i+1\n        })\n\n    }\n\n    handleChange=(e)=> {\n        this.setState({\n          mess: e.target.value\n        })\n    }\n\n    \n\n    render() {\n        return (\n            <div className=\"phase3\">\n                <div className=\"card3\">\n                    <div className=\"card-body3\">\n                    <h4 className=\"card-title3\">Automated ChatBot</h4>\n                        <p className=\"card-text3\"> You can question and answer here in 10-50 words. </p>\n                        {/* <div className=\"messageform\"> */}\n                            <form onSubmit={this.handleSubmit} className=\"send-message-form\">\n                                <input\n                                    onChange={this.handleChange}\n                                    value={this.state.mess}\n                                    placeholder=\"Type your message and hit ENTER\"\n                                    type=\"text\" />\n                            </form>\n                        {/* </div> */}\n                        \n                        <div className=\"messagelist-container\" > \n                            <MessageList messages={this.state.messages}/>\n                            \n                        </div>\n                        \n                    </div>\n                </div>\n            </div>\n        )\n      }\n}"]},"metadata":{},"sourceType":"module"}