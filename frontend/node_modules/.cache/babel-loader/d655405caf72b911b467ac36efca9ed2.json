{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar constraints = {\n  audio: true,\n  video: false\n}; // constraints - only audio needed\n\nvar MicrophoneRecorder = function () {\n  function MicrophoneRecorder(onStart, onStop, onData, options, audioContext) {\n    _classCallCheck(this, MicrophoneRecorder);\n\n    navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;\n    this.audioCtx = audioContext.getAudioContext();\n    this.analyser = audioContext.getAnalyser();\n    this.stream = null;\n    this.onStartCb = onStart;\n    this.onStopCb = onStop;\n    this.mediaOptions = options;\n    this.onData = onData;\n    this.chunks = [];\n    this.startTime = null;\n  }\n\n  MicrophoneRecorder.prototype.startRecording = function startRecording() {\n    var _this = this;\n\n    this.startTime = Date.now();\n\n    if (this.mediaRecorder) {\n      if (this.audioCtx && this.audioCtx.state === 'suspended') {\n        this.audioCtx.resume();\n      }\n\n      if (this.mediaRecorder && this.mediaRecorder.state === 'paused') {\n        this.mediaRecorder.resume();\n        return;\n      }\n\n      if (this.audioCtx && this.mediaRecorder && this.mediaRecorder.state === 'inactive') {\n        this.mediaRecorder.start(10);\n        var source = this.audioCtx.createMediaStreamSource(this.stream);\n        source.connect(this.analyser);\n\n        if (this.onStartCb) {\n          this.onStartCb();\n        }\n      }\n    } else {\n      if (navigator.mediaDevices) {\n        console.log('getUserMedia supported.');\n        navigator.mediaDevices.getUserMedia(constraints).then(function (str) {\n          _this.stream = str;\n\n          if (MediaRecorder.isTypeSupported(_this.mediaOptions.mimeType)) {\n            _this.mediaRecorder = new MediaRecorder(_this.stream, _this.mediaOptions);\n          } else {\n            _this.mediaRecorder = new MediaRecorder(_this.stream);\n          }\n\n          if (_this.onStartCb) {\n            _this.onStartCb();\n          }\n\n          _this.mediaRecorder.onstop = function () {\n            return _this.onStop();\n          };\n\n          _this.mediaRecorder.ondataavailable = function (e) {\n            _this.chunks.push(e.data);\n\n            if (_this.onData) {\n              _this.onData(e.data);\n            }\n          };\n\n          _this.mediaRecorder.start(10);\n\n          var source = _this.audioCtx.createMediaStreamSource(_this.stream);\n\n          source.connect(_this.analyser);\n        });\n      } else {\n        alert('Your browser does not support audio recording');\n      }\n    }\n  };\n\n  MicrophoneRecorder.prototype.stopRecording = function stopRecording() {\n    if (this.mediaRecorder && this.mediaRecorder.state !== 'inactive') {\n      this.mediaRecorder.stop();\n      this.audioCtx.suspend();\n    }\n  };\n\n  MicrophoneRecorder.prototype.unMount = function unMount() {\n    this.stream && this.stream.getTracks()[0].stop();\n    this.mediaRecorder = null;\n  };\n\n  MicrophoneRecorder.prototype.onStop = function onStop() {\n    var blob = new Blob(this.chunks, {\n      'type': this.mediaOptions.mimeType\n    });\n    this.chunks = [];\n    var blobObject = {\n      blob: blob,\n      startTime: this.startTime,\n      stopTime: Date.now(),\n      options: this.mediaOptions,\n      blobURL: window.URL.createObjectURL(blob)\n    };\n\n    if (this.onStopCb) {\n      this.onStopCb(blobObject);\n    }\n  };\n\n  return MicrophoneRecorder;\n}();\n\nexport { MicrophoneRecorder as default };","map":null,"metadata":{},"sourceType":"module"}