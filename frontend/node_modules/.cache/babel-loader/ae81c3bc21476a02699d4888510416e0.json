{"ast":null,"code":"var _class, _temp;\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React from 'react';\nimport MicrophoneRecorder from '../libs/MicrophoneRecorder';\nimport AudioContext from '../libs/AudioContext';\nimport AudioPlayer from '../libs/AudioPlayer';\nimport Visualizer from '../libs/Visualizer';\nvar ReactMicRecord = (_temp = _class = function (_React$Component) {\n  _inherits(ReactMicRecord, _React$Component);\n\n  function ReactMicRecord(props) {\n    _classCallCheck(this, ReactMicRecord);\n\n    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));\n\n    _this.audioContext = null;\n    _this.microphoneRecorder = null;\n    _this.state = {\n      canvas: null,\n      canvasCtx: null\n    };\n    return _this;\n  }\n\n  ReactMicRecord.prototype.componentDidMount = function componentDidMount() {\n    var _this2 = this;\n\n    var _props = this.props,\n        onStop = _props.onStop,\n        onStart = _props.onStart,\n        onData = _props.onData,\n        audioElem = _props.audioElem,\n        audioBitsPerSecond = _props.audioBitsPerSecond,\n        mimeType = _props.mimeType;\n    var canvas = this.visualizerRef;\n    var canvasCtx = canvas.getContext(\"2d\");\n    var options = {\n      audioBitsPerSecond: audioBitsPerSecond,\n      mimeType: mimeType\n    };\n    this.audioContext = new AudioContext();\n\n    if (audioElem) {\n      this.audioPlayer = new AudioPlayer(audioElem, this.audioContext);\n    } else {\n      this.microphoneRecorder = new MicrophoneRecorder(onStart, onStop, onData, options, this.audioContext);\n    }\n\n    this.setState({\n      canvas: canvas,\n      canvasCtx: canvasCtx\n    }, function () {\n      return _this2.visualize();\n    });\n  };\n\n  ReactMicRecord.prototype.componentWillUnmount = function componentWillUnmount() {\n    if (this.microphoneRecorder) {\n      this.microphoneRecorder.unMount();\n      this.clear();\n    }\n  };\n\n  ReactMicRecord.prototype.visualize = function visualize() {\n    var _props2 = this.props,\n        backgroundColor = _props2.backgroundColor,\n        strokeColor = _props2.strokeColor,\n        width = _props2.width,\n        height = _props2.height,\n        visualSetting = _props2.visualSetting;\n    var _state = this.state,\n        canvas = _state.canvas,\n        canvasCtx = _state.canvasCtx;\n    this.visualizer = new Visualizer(this.audioContext, canvasCtx, canvas, width, height, backgroundColor, strokeColor);\n\n    if (visualSetting === 'sinewave') {\n      this.visualizer.visualizeSineWave();\n    } else if (visualSetting === 'frequencyBars') {\n      this.visualizer.visualizeFrequencyBars();\n    }\n  };\n\n  ReactMicRecord.prototype.clear = function clear() {\n    var _state2 = this.state,\n        canvasCtx = _state2.canvasCtx,\n        width = _state2.width,\n        height = _state2.height;\n    canvasCtx.clearRect(0, 0, width, height);\n  };\n\n  ReactMicRecord.prototype.render = function render() {\n    var _this3 = this;\n\n    var _props3 = this.props,\n        record = _props3.record,\n        width = _props3.width,\n        height = _props3.height,\n        className = _props3.className;\n\n    if (record) {\n      if (this.microphoneRecorder) {\n        this.microphoneRecorder.startRecording();\n        this.visualize();\n      }\n    } else {\n      if (this.microphoneRecorder) {\n        this.microphoneRecorder.stopRecording();\n        this.clear();\n      }\n    }\n\n    return React.createElement('canvas', {\n      ref: function ref(c) {\n        return _this3.visualizerRef = c;\n      },\n      height: height,\n      width: width,\n      className: className\n    });\n  };\n\n  return ReactMicRecord;\n}(React.Component), _class.defaultProps = {\n  backgroundColor: 'rgba(255, 255, 255, 0.5)',\n  strokeColor: '#000000',\n  className: 'visualizer',\n  audioBitsPerSecond: 128000,\n  mimeType: 'audio/webm;codecs=opus',\n  record: false,\n  width: 640,\n  height: 100,\n  visualSetting: 'sinewave'\n}, _temp);\nexport { ReactMicRecord as default };","map":null,"metadata":{},"sourceType":"module"}