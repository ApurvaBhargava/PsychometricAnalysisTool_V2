{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction hexToRgb(hex) {\n  var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n  return result ? {\n    r: parseInt(result[1], 16),\n    g: parseInt(result[2], 16),\n    b: parseInt(result[3], 16)\n  } : null;\n}\n\nvar Visualizer = function () {\n  function Visualizer(audioContext, canvasCtx, canvas, width, height, backgroundColor, strokeColor) {\n    _classCallCheck(this, Visualizer);\n\n    this.analyser = audioContext.getAnalyser();\n    this.canvasCtx = canvasCtx;\n    this.canvas = canvas;\n    this.width = width;\n    this.height = height;\n    this.backgroundColor = backgroundColor;\n    this.strokeColor = strokeColor;\n    this.drawVisual = null;\n  }\n\n  Visualizer.prototype.visualizeSineWave = function visualizeSineWave() {\n    var _this = this;\n\n    this.analyser.fftSize = 2048;\n    var bufferLength = this.analyser.fftSize;\n    var dataArray = new Uint8Array(bufferLength);\n    this.canvasCtx.clearRect(0, 0, this.width, this.height);\n\n    var draw = function draw() {\n      _this.drawVisual = requestAnimationFrame(draw);\n\n      _this.analyser.getByteTimeDomainData(dataArray);\n\n      _this.canvasCtx.fillStyle = _this.backgroundColor;\n\n      _this.canvasCtx.fillRect(0, 0, _this.width, _this.height);\n\n      _this.canvasCtx.lineWidth = 2;\n      _this.canvasCtx.strokeStyle = _this.strokeColor;\n\n      _this.canvasCtx.beginPath();\n\n      var sliceWidth = _this.width * 1.0 / bufferLength;\n      var x = 0;\n\n      for (var i = 0; i < bufferLength; i++) {\n        var v = dataArray[i] / 128.0;\n        var y = v * _this.height / 2;\n\n        if (i === 0) {\n          _this.canvasCtx.moveTo(x, y);\n        } else {\n          _this.canvasCtx.lineTo(x, y);\n        }\n\n        x += sliceWidth;\n      }\n\n      _this.canvasCtx.lineTo(_this.canvas.width, _this.canvas.height / 2);\n\n      _this.canvasCtx.stroke();\n    };\n\n    draw();\n  };\n\n  Visualizer.prototype.visualizeFrequencyBars = function visualizeFrequencyBars() {\n    var _this2 = this;\n\n    this.analyser.fftSize = 256;\n    var bufferLength = this.analyser.frequencyBinCount;\n    var dataArray = new Uint8Array(bufferLength);\n    this.canvasCtx.clearRect(0, 0, this.width, this.height);\n\n    var draw = function draw() {\n      _this2.drawVisual = requestAnimationFrame(draw);\n\n      _this2.analyser.getByteFrequencyData(dataArray);\n\n      _this2.canvasCtx.fillStyle = _this2.backgroundColor;\n\n      _this2.canvasCtx.fillRect(0, 0, _this2.width, _this2.height);\n\n      var barWidth = _this2.width / bufferLength * 2.5;\n      var barHeight = void 0;\n      var x = 0;\n\n      for (var i = 0; i < bufferLength; i++) {\n        barHeight = dataArray[i];\n        var rgb = hexToRgb(_this2.strokeColor);\n        _this2.canvasCtx.fillStyle = _this2.strokeColor;\n\n        _this2.canvasCtx.fillRect(x, _this2.height - barHeight / 2, barWidth, barHeight / 2);\n\n        x += barWidth + 1;\n      }\n    };\n\n    draw();\n  };\n\n  return Visualizer;\n}();\n\nexport { Visualizer as default };","map":null,"metadata":{},"sourceType":"module"}